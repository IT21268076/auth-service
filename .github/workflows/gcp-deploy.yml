name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: auth-service-cluster
  GKE_ZONE: us-central1-a
  IMAGE: auth-service

jobs:
  test-and-analyze:
    name: Test and SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Create test configuration
        run: |
          mkdir -p src/test/resources
          cat > src/test/resources/application-test.properties << EOF
          # Test database configuration
          spring.datasource.url=jdbc:h2:mem:testdb;MODE=MYSQL
          spring.datasource.username=sa
          spring.datasource.password=
          spring.datasource.driver-class-name=org.h2.Driver
          
          # JPA/Hibernate for tests
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.show-sql=true
          
          # JWT for tests
          jwt.secret=test-secret-key-for-testing
          jwt.expiration=86400000
          
          # Disable database initialization for tests
          spring.data.jpa.repositories.bootstrap-mode=default
          spring.sql.init.mode=never
          EOF

      - name: Run tests
        run: ./mvnw clean test -Dspring.profiles.active=test

      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw verify sonar:sonar -DskipDependencyCheck=true

  build-and-deploy:
    name: Build and Deploy
    needs: test-and-analyze
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          token_format: 'access_token'

      - name: Docker Login to GCR
        uses: 'docker/login-action@v2'
        with:
          registry: 'gcr.io'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:latest

      - name: Set up GKE credential
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to GKE
        run: |
          # Check if the deployment exists
          if kubectl get deployment auth-service &> /dev/null; then
            echo "Updating existing deployment..."
            kubectl set image deployment/auth-service auth-service=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          else
            echo "Creating new deployment..."
          
            # Create MySQL secret
            echo "Creating MySQL secret..."
            kubectl create secret generic mysql-credentials \
              --from-literal=username=admin \
              --from-literal=password=password || true
          
            # Create JWT secret
            echo "Creating JWT secret..."
            kubectl create secret generic jwt-secret \
              --from-literal=secret="d63a385c672d1bfdd8084d4deccdcab94d2ad4e306dd34e0adc702d8a3a8c8c460107347bfc90c9c9b1516d589a48fec0c644d14aebfc80b0b1ca39b70d9da6b51723645748851e704faef3f7f5c436308aab23e76743459e50286d0bd15d3a55b3493076de42978ae58b1b43370382f4f259bad4b01d3b168c986f7ffc5f570" || true
          
            # Create all resources using kubectl with YAML strings
            echo "Creating MySQL PVC..."
            kubectl apply -f <(echo '
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: mysql-pvc
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 5Gi
            ')
          
            echo "Creating MySQL deployment..."
            kubectl apply -f <(echo '
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: mysql
            spec:
              selector:
                matchLabels:
                  app: mysql
              template:
                metadata:
                  labels:
                    app: mysql
                spec:
                  containers:
                    - name: mysql
                      image: mysql:8.0
                      args:
                        - --default-authentication-plugin=mysql_native_password
                      ports:
                        - containerPort: 3306
                      env:
                        - name: MYSQL_DATABASE
                          value: "authdb"
                        - name: MYSQL_ROOT_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: mysql-credentials
                              key: password
                        - name: MYSQL_USER
                          valueFrom:
                            secretKeyRef:
                              name: mysql-credentials
                              key: username
                        - name: MYSQL_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: mysql-credentials
                              key: password
                      volumeMounts:
                        - name: mysql-storage
                          mountPath: /var/lib/mysql
                  volumes:
                    - name: mysql-storage
                      persistentVolumeClaim:
                        claimName: mysql-pvc
            ')
          
            echo "Creating MySQL service..."
            kubectl apply -f <(echo '
            apiVersion: v1
            kind: Service
            metadata:
              name: mysql
            spec:
              selector:
                app: mysql
              ports:
                - port: 3306
              clusterIP: None
            ')
          
            echo "Waiting for MySQL to initialize..."
            sleep 45
          
            echo "Creating auth-service deployment..."
            kubectl apply -f <(cat <<'EOFDEPLOY'
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: auth-service
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: auth-service
              template:
                metadata:
                  labels:
                    app: auth-service
                spec:
                  containers:
                    - name: auth-service
                      image: gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
                      ports:
                        - containerPort: 8080
                      env:
                        - name: SPRING_PROFILES_ACTIVE
                          value: "prod"
                        - name: SPRING_DATASOURCE_URL
                          value: "jdbc:mysql://mysql:3306/authdb?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true"
                        - name: SPRING_DATASOURCE_USERNAME
                          valueFrom:
                            secretKeyRef:
                              name: mysql-credentials
                              key: username
                        - name: SPRING_DATASOURCE_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: mysql-credentials
                              key: password
                        - name: JWT_SECRET
                          valueFrom:
                            secretKeyRef:
                              name: jwt-secret
                              key: secret
                      resources:
                        limits:
                          cpu: "0.5"
                          memory: "512Mi"
                        requests:
                          cpu: "0.2"
                          memory: "256Mi"
                      readinessProbe:
                        httpGet:
                          path: /api/test/all
                          port: 8080
                        initialDelaySeconds: 120
                        periodSeconds: 15
                        timeoutSeconds: 5
                        failureThreshold: 5
                      livenessProbe:
                        httpGet:
                          path: /api/test/all
                          port: 8080
                        initialDelaySeconds: 180
                        periodSeconds: 30
                        timeoutSeconds: 5
                        failureThreshold: 3
            EOFDEPLOY
            ) | envsubst | kubectl apply -f -
          
            echo "Creating auth-service service..."
            kubectl apply -f <(echo '
            apiVersion: v1
            kind: Service
            metadata:
              name: auth-service
            spec:
              selector:
                app: auth-service
              ports:
                - port: 80
                  targetPort: 8080
              type: LoadBalancer
            ')
          fi
          
          # Wait for the deployment to be ready
          echo "Waiting for deployment to be ready..."
          kubectl rollout status deployment/auth-service --timeout=10m
          
          # Get the service URL
          echo "Service is available at:"
          kubectl get service auth-service