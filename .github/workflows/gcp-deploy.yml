name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: auth-service-cluster
  GKE_ZONE: us-central1-a
  IMAGE: auth-service

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          token_format: 'access_token'

      - name: Docker Login to GCR
        uses: 'docker/login-action@v2'
        with:
          registry: 'gcr.io'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:latest

      - name: Set up GKE credential
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to GKE
        run: |
          # Get the current deployment yaml to modify
          kubectl get deployment auth-service -o yaml > current-deployment.yaml
          
          # Update the deployment with the new image and connection settings
          cat > updated-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: auth-service
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: auth-service
            template:
              metadata:
                labels:
                  app: auth-service
              spec:
                containers:
                  - name: auth-service
                    image: gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
                    ports:
                      - containerPort: 8080
                    env:
                      - name: SPRING_PROFILES_ACTIVE
                        value: "prod"
                      - name: SPRING_DATASOURCE_URL
                        value: "jdbc:mysql://mysql:3306/authdb?useSSL=false&allowPublicKeyRetrieval=true"
                      - name: SPRING_DATASOURCE_USERNAME
                        valueFrom:
                          secretKeyRef:
                            name: mysql-credentials
                            key: username
                      - name: SPRING_DATASOURCE_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: mysql-credentials
                            key: password
                      - name: JWT_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: jwt-secret
                            key: secret
                    resources:
                      limits:
                        cpu: "0.5"
                        memory: "512Mi"
                      requests:
                        cpu: "0.2"
                        memory: "256Mi"
                    readinessProbe:
                      httpGet:
                        path: /api/test/all
                        port: 8080
                      initialDelaySeconds: 120
                      periodSeconds: 15
                      timeoutSeconds: 5
                      failureThreshold: 5
                    livenessProbe:
                      httpGet:
                        path: /api/test/all
                        port: 8080
                      initialDelaySeconds: 180
                      periodSeconds: 30
                      timeoutSeconds: 5
                      failureThreshold: 3
          EOF
          
          # Apply the updated deployment
          kubectl apply -f updated-deployment.yaml
          
          # Wait for rollout with increased timeout
          kubectl rollout status deployment/auth-service --timeout=10m
          
          # If rollout fails, check pods and logs
          if [ $? -ne 0 ]; then
          echo "Deployment failed, checking pod status..."
          kubectl get pods -l app=auth-service
          POD_NAME=$(kubectl get pods -l app=auth-service -o jsonpath="{.items[0].metadata.name}")
          echo "Checking logs for pod $POD_NAME..."
          kubectl logs $POD_NAME
          fi