name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: auth-service-cluster
  GKE_ZONE: us-central1-a
  IMAGE: auth-service

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Add Spring Boot Actuator
        run: |
          # Check if actuator is already in pom.xml
          if ! grep -q "spring-boot-starter-actuator" pom.xml; then
            # Add actuator dependency
            sed -i '/<dependencies>/a \
            <dependency>\
                <groupId>org.springframework.boot</groupId>\
                <artifactId>spring-boot-starter-actuator</artifactId>\
            </dependency>' pom.xml
          fi

      - name: Create production properties
        run: |
          mkdir -p src/main/resources/config
          cat > src/main/resources/config/application-prod.properties << EOF
          # Database Configuration for Kubernetes
          spring.datasource.url=jdbc:mysql://mysql:3306/authdb?useSSL=false&allowPublicKeyRetrieval=true
          spring.datasource.username=admin
          spring.datasource.password=password
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          
          # JPA/Hibernate
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.show-sql=true
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
          
          # JWT Configuration
          jwt.secret=d63a385c672d1bfdd8084d4deccdcab94d2ad4e306dd34e0adc702d8a3a8c8c460107347bfc90c9c9b1516d589a48fec0c644d14aebfc80b0b1ca39b70d9da6b51723645748851e704faef3f7f5c436308aab23e76743459e50286d0bd15d3a55b3493076de42978ae58b1b43370382f4f259bad4b01d3b168c986f7ffc5f570
          jwt.expiration=86400000
          
          # Management endpoints
          management.endpoints.web.exposure.include=health,info
          management.endpoint.health.show-details=always
          EOF

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure Docker with gcloud credentials
        run: |
          gcloud --quiet auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

      - name: Configure kubectl
        run: |
          gcloud components install kubectl
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

      - name: Deploy updated Kubernetes config
        run: |
          # Update JWT secret if it doesn't exist
          kubectl get secret jwt-secret || kubectl create secret generic jwt-secret --from-literal=secret="d63a385c672d1bfdd8084d4deccdcab94d2ad4e306dd34e0adc702d8a3a8c8c460107347bfc90c9c9b1516d589a48fec0c644d14aebfc80b0b1ca39b70d9da6b51723645748851e704faef3f7f5c436308aab23e76743459e50286d0bd15d3a55b3493076de42978ae58b1b43370382f4f259bad4b01d3b168c986f7ffc5f570"
          
          # Apply updated deployment configuration
          cat > updated-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: auth-service
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: auth-service
            template:
              metadata:
                labels:
                  app: auth-service
              spec:
                containers:
                  - name: auth-service
                    image: gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
                    ports:
                      - containerPort: 8080
                    env:
                      - name: SPRING_PROFILES_ACTIVE
                        value: "prod"
                      - name: SPRING_DATASOURCE_URL
                        value: "jdbc:mysql://mysql:3306/authdb?useSSL=false&allowPublicKeyRetrieval=true"
                      - name: SPRING_DATASOURCE_USERNAME
                        valueFrom:
                          secretKeyRef:
                            name: mysql-credentials
                            key: username
                      - name: SPRING_DATASOURCE_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: mysql-credentials
                            key: password
                      - name: JWT_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: jwt-secret
                            key: secret
                    resources:
                      limits:
                        cpu: "0.5"
                        memory: "512Mi"
                      requests:
                        cpu: "0.2"
                        memory: "256Mi"
                    startupProbe:
                      httpGet:
                        path: /actuator/health
                        port: 8080
                      failureThreshold: 30
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /actuator/health
                        port: 8080
                      initialDelaySeconds: 60
                      periodSeconds: 10
                      failureThreshold: 3
                    livenessProbe:
                      httpGet:
                        path: /actuator/health
                        port: 8080
                      initialDelaySeconds: 120
                      periodSeconds: 30
                      failureThreshold: 3
          EOF
          
          kubectl apply -f updated-deployment.yaml
          kubectl rollout status deployment/auth-service --timeout=10m

      - name: Troubleshoot Deployment
        if: ${{ failure() }}
        run: |
          echo "Deployment failed, checking pod status..."
          kubectl get pods
          
          # Get the pod name of the failing deployment
          POD_NAME=$(kubectl get pods -l app=auth-service -o jsonpath="{.items[0].metadata.name}")
          echo "Checking logs for pod $POD_NAME..."
          kubectl logs $POD_NAME
          
          # Describe the deployment for more details
          echo "Describing deployment..."
          kubectl describe deployment auth-service
          
          # Check MySQL service
          echo "Checking MySQL service..."
          kubectl get svc mysql
          kubectl get pods -l app=mysql