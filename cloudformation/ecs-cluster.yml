AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Auth Service ECS Cluster'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the ECS cluster will be deployed

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the ECS tasks will be deployed

  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port exposed by the container

  ImageTag:
    Type: String
    Default: latest
    Description: Docker image tag

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: auth-service-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS MySQL
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ServiceSecurityGroup

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Auth Service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: auth-service
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: auth-service
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/auth-service:${ImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: auth-service
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: prod
            - Name: SERVER_PORT
              Value: !Ref ContainerPort
            - Name: SPRING_DATASOURCE_URL
              Value: !Sub jdbc:mysql://${DbInstance.Endpoint.Address}:${DbInstance.Endpoint.Port}/authdb
            - Name: SPRING_DATASOURCE_USERNAME
              Value: !Ref DbUsername
            - Name: SPRING_DATASOURCE_PASSWORD
              Value: !Ref DbPassword

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/auth-service
      RetentionInDays: 14

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: auth-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: auth-service
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: auth-service-lb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/test/all
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: ip
      Name: auth-service-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Auth Service RDS
      SubnetIds: !Ref Subnets

  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: authdb
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      VPCSecurityGroups:
        - !GetAtt DbSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DbSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      StorageEncrypted: true

  DbUsername:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /auth-service/db/username
      Type: String
      Value: admin
      Description: Database username for Auth Service

  DbPassword:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /auth-service/db/password
      Type: String
      Value: !Join ['', ['{{resolve:secretsmanager:auth-service-db-secret:SecretString:password}}'] ]
      Description: Database password for Auth Service

  DbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: auth-service-db-secret
      Description: RDS MySQL credentials for Auth Service
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

Outputs:
  ServiceUrl:
    Description: URL of the load balancer for the Auth Service
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: AuthServiceUrl

  EcsClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: AuthServiceEcsClusterName

  ServiceName:
    Description: Name of the ECS service
    Value: !GetAtt Service.Name
    Export:
      Name: AuthServiceEcsServiceName